#!/usr/bin/env python

from Bio import SeqIO
from optparse import OptionParser
# import numpy as np
import sys

parser = OptionParser()
parser.add_option("-i", "--hits", dest="hitspath", default="None",
                  help="[Required] Location of the HMMER hits fullseq fasta file")
parser.add_option("-t", "--taxadb", dest="taxapath", default="None",
                  help="[Required] Location of the file containing the taxonomy database from uniprot generated by extract_taxonomy.py")
parser.add_option("-n", "--name", dest="name", default="sorted_sequences",
                  help="[Required] Location of the file containing the taxonomy database from uniprot generated by extract_taxonomy.py")


# Parse options into variables
(options, args) = parser.parse_args()

hitspath = options.hitspath
taxapath = options.taxapath
name = options.name
if hitspath is None or taxapath is None:
    print "Invalid options"
    sys.exit(1)

# Define level of taxonomies for sorting (refer to Uniprot taxonomy for choiosing the levels)

levels = {
    'Eukaryota': 3,
    'Bacteria': 2,
    'Archea': 2
}

# Define the number of sequence per taxa that is desired for ouptut

N = 20

# Define the number of files to generate

M = 1

# Open files and parse

taxaDB = {}
f = open(taxapath)
lines = f.readlines()
for line in lines:
    ID, ncbi, taxa = line.strip().split('\t')
    taxa = taxa.split(',')
    taxaDB[ID] = taxa


# Sort hits by level of taxonomies

handle = SeqIO.parse(hitspath, 'fasta')
hits_sorted = {}
for Seq in handle:
    # ID = Seq.name.strip().split('_')[1]
    ID = Seq.name.strip().split('|')[0].split('_')[1]
    evalue = float(Seq.name.strip().split('|')[2])
    Seq.description = Seq.name.strip().split('|')[0]
    if taxaDB[ID][0] in levels:
        # print taxaDB[ID]
        if len(taxaDB[ID]) > levels[taxaDB[ID][0]]:
            taxa = taxaDB[ID][levels[taxaDB[ID][0]]]
            if taxa not in hits_sorted:
                hits_sorted[taxa] = []
            hits_sorted[taxa].append((Seq, evalue))


# Generate random series of N sequence per taxa

def check_duplicate(seqlist, seq):
    """Check for duplicate sequences to remove prior to sorting (avoids wasting a taxa)."""
    for s in seqlist:
        if str(s[0].seq) == str(seq[0].seq):
            return True
        if s[0].name.split('|')[0].split('_')[1] == seq[0].name.split('|')[0].split('_')[1]:
            return True
    return False

for m in range(M):
    align = []
    for taxa in hits_sorted:
        # np.random.shuffle(hits_sorted[taxa])
        tmp = sorted(hits_sorted[taxa], key=lambda hit: hit[1])
        print "tmp len:", len(tmp)
        tmp2 = [tmp[0]]
        for i in tmp[1:]:
            if not check_duplicate(tmp2, i):
                tmp2.append(i)
        print "tmp2 len:", len(tmp2)
        al = [i[0] for i in tmp2[:N]]
        align += al
    print "total sequences saved: ", len(align)
    f = open(name + '_%s' % m + '.fa', 'w')
    SeqIO.write(align, f, 'fasta')
    f.close()
